{"name":"FiT-framework ","tagline":"# Fast Integration Test framework for mainly JVM applications provided. This project came into being after bar fights with Arquillian. He was alway so... slow ;)#","body":"# FiT-framework framework \r\n\r\nThis project came into existence in trying to create a lightning fast integration test framework that can handle plain JAX-RS application running in say Spring-Boot with an embedded tomcat (I am aware when using Jersey alone you can utilize their great test-framework). \r\n\r\nThe goal though is to expand the framework to handle an application running on say JBoss using Reastasy as their implementation, or a Dropwizard application exposing services with HTTP (e.g. REST) with a backing database.\r\n\r\nThe main goal is to make it modular, where each test-application has its own container or \"fragment.\" \r\n\r\nIf you haven't checked it out yet, you can find many nice examples here at the home of Wildfly-Swarm   [wildfly-swarm-examples](https://github.com/wildfly-swarm/wildfly-swarm-examples). \r\n\r\nE.g. Wildfly-Swarm uses undertow for HTTP-handling (and more), something magic happens under the hood and they would get a Undertow, which can handle CDI, and these few lines:\r\n````\r\nListenerInfo listener = Servlets.listener(CDIRequestListener.class);\r\nresteasyDeployment.setInjectorFactoryClass(CDIInjectorFactory.class.getName());\r\n`````\r\n\r\nCurrently I am working for a great customer who's organization has embraced Docker and have amazingly created a very solid infrastructure. \r\n\r\nI feel very strongly that this is a very sound, logical and healthy approach to doing micro-services. By that I mean that you could have very (many or few) light containers, running the code and doing the tasks they are designed to do. Then orchestrate then via `compose` or maybe `docker-swarm.` Say you have a some messageQueue that normally takes most of the load... Solution could be to spin up one or two more, and of course make sure your messages are handled properly :)    \r\n\r\nBack to this FiT framework I was talking about. They should:\r\n* run very, very fast\r\n* Test the core business logic of your application (e.g. say a simple application that receives (REST/HTTP) requests, stores them in a database, and finally gives some response, hopefully `OK 200`)\r\n* You do NOT need your entire infrastructure for running these \"integration tests\". It is safe to mock out a few of them.\r\n* The tests are intended to be a tool for the developers, but they should run so fast that no programmer would be tempted to do `mvn install -DskipTests`. :)\r\n   \r\nFor this framework to run their tests faster than \"The Flash\", they need something more. \r\n\r\n* Support for CDI \r\n* Enterprise like behaviour, Messaging, Container managed datasources, etc.  \r\n* I have started with Weld here but that could change.* \r\n\r\nIn the enterprise world where the great people from RedHat works, Wildfly-Swarm is a decomposed Java EE server. Here you actually just pick the stuff you need to complete your task, messaging, logstash integration, jaxrs with msc, jaxrs running in Docker containers with very little footprint, JPA with container-managed Persistence Context, a ManagedExecutorService... You name it. \r\n\r\nFor that last one mentioned, the Managed Executor Service was introduced in Java EE 7 (Wildfly 8.2) luckily it extends the ExecutorService in the JDK (this gives us the option of mimicking container behavior in the (production) code you test by utilizing Mockito and inject an Alternative or a @Named instance of the ExecutorService as a mock. \r\n\r\nTake the code for a test-ride, and if you see something that is good or bad by all means, comment and please contribute back via pull-requests if you find it interesting!\r\n\r\nBest regards,\r\nThomas Andersen","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}